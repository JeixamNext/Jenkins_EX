https://github.com/ricardoandre97/jenkins-resources

¿Qué es la integración continua (CI)?
La integración continua o Continuous Integration (CI) es una práctica 
habitual en desarrollo de software que consiste en integrar 
frecuentemente mejoras en el código de un proyecto una vez han 
sido validadas, normalmente varias veces al día, con el objetivo 
de detectar errores lo antes posible. 
Cada cambio que realiza un desarrollador 
(ya sea una resolución de un bug, la creación de una nueva 
funcionalidad, etc.) se comprueba compilando el código fuente y 
obteniendo un ejecutable (llamado build). Si es validado, 
será incorporado al código fuente y desplegado. 


que es Jenkins:

Jenkins es un servidor open source para la integración continua y desarollo continuo. (CI/CD)
Es una herramienta que se utiliza para compilar y probar proyectos 
de software de forma continua, lo que facilita a los desarrolladores 
integrar cambios en un proyecto y entregar nuevas versiones a los 
usuarios. Escrito en Java, es multiplataforma y accesible mediante 
interfaz web. Es el software más utilizado en la actualidad 
para este propósito.

¿Qué se puede hacer con Jenkins?
Con Jenkins podemos automatizar multitud de tareas que nos ayudarán a 
reducir el time to market de nuestros productos digitales o 
de nuevas versiones de ellos. Concretamente, con esta herramienta 
podemos:

- Automatizar la compilación y testeo de software.
- Notificar a los equipos correspondientes la detección de errores.
- Desplegar los cambios en el código que hayan sido validados.
- Hacer un seguimiento de la calidad del código y de la cobertura de las pruebas.
- Generar la documentación de un proyecto.

Podemos ampliar las funcionalidades de Jenkins a través de 
múltiples plugins creados por la comunidad, diseñados para 
ayudarnos en centenares de tareas, a lo largo de las diferentes 
etapas del proceso de desarrollo.

Como funciona Jenkins:

- Un desarrollador hace un commit de código en el repositorio del código fuente. 
- El servidor de Jenkins hace comprobaciones periódicas para detectar cambios en el repositorio.
- Poco después del commit, Jenkins detecta los cambios que se han producido en el código fuente. Compila el código y prepara un build. Si el build falla, envía una notificación al equipo en cuestión. Si resulta exitoso, lo despliega en el servidor de testeo.
- Después de la prueba, Jenkins genera un feedback y notifica al equipo el build y los resultados del testeo.
- Jenkins continúa revisando el repositorio frecuentemente y todo el proceso se repite.

instalar jenkins (docker)
# sudo systemctl enabled docker
# sudo usermod -aG docker (whoami)
# install docker-compose
- descargar docker image jenkins
-- docker pull Jenkins/jenkins
- docker-compose up -d 
- chown 1000:1000 jenkins_home -R (permisos si no los tiene)
-- docker logs -f jenkins (password de la instalacion para acceder a jenkins)

Uso de jenkins basico:

- crear: new job
- build/shell:echo hola mundo
- ejecutar ahora/console output

ejecutar un script en jenkins

- docker cp cript.sh jenkins:/tmp/cript.sh
- configure/ recent changes/build/sheel

añadir parametros:

- general/proyecto parametrizado/añadir parametro
- build whit parameter (para editarlos)
- choise parameter:(lista de parametros)

añadir plugins: 

- plugin manager
- buscar

integrar docker ssh y jenkins

- entrar al contenedor
- ssh
- manager Jenkins:configure system:ssh remote host(port 22,credenciales)
# job build execute shell romote using ssh
# S3 bucket: services:s3:crear 
# AIM identity:create user:programatic access: attach policy directly:amazon full access:descargar .csv
# configurar variables aws: export AWS_ACCSESS_KEY_ID=KHKSJJLKSLJLUUSFAFLOOPS(.csv)/export AWS_ACCSESS_KEY=secret key
# aws s3 cp temp/db.sql s3://jenkins-mysql-backup(s3 name)/db.sql
# jenkins:credentials:add credential:secret text:(mysql_password)(AWS_Secret)  

proyecto con AWS

- nuevo projecto: estilo libre: proyecto parametrizado
- string parametro: MYSQL_HOST:db_host / DATABASE_NAME:testdb / AWS_BUCKET_NAME: amazon s3 nombre 
- build enviroment: use secret text or file:secret text: BACKUP mysql:MYSQL_PASSWORD / credential AWS:AWS_SECRET
# añadir cada parametro necesario 
- build:ejecutar shell desde ssh: /temp/backup_and_upload.sh $ MYSQL_HOST/$MYSQL_PASSWORD/$DATABASE_NAME(todos los parametros)

Jenkins con ansible

- cp ../fedora/remote-key .
- nano host
- create playbook: ansible-playbook -i host playbook.yaml
- jenkins manager:plugin:ansible
- new item:libre:build:invoke ansible playbook:path playbook/playbook.yml:file host list:path host
- crear parametro: proyecto parametrizado:string parametro:ANSIBLE_MSG: parametro extra:MSG:ANSIBLE_MSG
- plugin:ansicolor:build enviroment:color ANSI output
- 

Jenkins con seguridad
-

jenkins con maven:

- Apache Maven es una herramienta de comprensión y gestión de proyectos 
de software. Basado en el concepto de un modelo de objetos 
de proyecto (POM), Maven puede administrar la construcción, 
los informes y la documentación de un proyecto desde 
una pieza central de información.

- instalar plugin maven:maven:maven integration/instalar git
# clonar repositorio git: new-item:git
# configuar jenkins:global configuracion:maven 
#configurar proyecto:build:ejecutar tareas maven: version creada:funcion del codigo(build)
- deploy jar:build:execute sheel:
- build:publish JUNIT test result report:post-bild-actions:tarjet/surefire-reports/* .xml


CI/CD

- https://www.infoworld.com/article/3271126/ci-cd/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html


Jenkins y email aws

- plugins:mailer
- aws:serviciod:ses(simple email server):email addresses:loquesea@.gmail
- configure system:email notification:SMTP amazon:credentials amazon SMTP
- aws: SES home:SMTP settings:server name:create credentials 
- configure system:email notification:puerto (SMTP settings) 
# post-build:email notification (notificaciones dentro de un proyecto)

Jenkins Pipelines:

- Jenkins Pipeline es un conjunto de complementos que 
admite la implementación e integración de canalizaciones de
entrega continua en Jenkins.
Pipeline proporciona un conjunto extensible de herramientas para 
modelar canalizaciones de entrega de simples a complejas 
"como código" a través de la sintaxis del lenguaje 
específico de dominio (DSL) de Pipeline.
- https://www.jenkins.io/doc/book/pipeline/
- instalar plugin:pipeline
- newitem:pipeline:pipeline script:build now 
- 
